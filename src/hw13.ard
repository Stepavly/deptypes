\import Data.Bool
\import Function
\import Function.Meta
\import Logic
\import Logic.Meta
\import Paths.Meta
\import lect05 (unext)
\import lect12 (isInj)
\import lect13

-- 1. Докажите, что add x (add x s) = add x s и add x (add y s) = add y (add x s)

\func add-idemp {S : SetSpec} (x : S.A) (s : S) : add x (add x s) = add x s => setExt \lam a =>
    (\case addProp __ \with {
      | byLeft r => rewrite r addHead
      | byRight r => r
    },
     addTail)

\func add-swap {S : SetSpec} (x y : S.A) (s : S) : add x (add y s) = add y (add x s) =>
  setExt \lam a => (aux a y x, aux a x y)
  \where {
    \func aux (a x y : S.A) (h : S.isElem a (S.add y (S.add x s))) : S.isElem a (S.add x (S.add y s))
      => \case addProp h \with {
        | byLeft r => rewrite r $ addTail addHead
        | byRight r => \case addProp r \with {
          | byLeft q => rewrite q addHead
          | byRight q => addTail $ addTail q
        }
      }
  }

-- 2. Докажите, что множество подмножеств является инстансом SetSpec

\instance subsets {A : \Set} : SetSpec {A} (A -> \Prop) => \new SetSpec {
  | empty => \lam a => Empty
  | add x s => \lam a => (a = x) || s a
  | isElem a s => s a
  | setExt p => ext (\lam a => ext $ p a)
  | addHead => byLeft idp
  | addTail p => byRight p
  | addProp in-all => in-all
  | emptyProp => contradiction
}

-- 3. Докажите, что множество подмножеств является наибольшим инстансом, то есть любой другой вкладывается в него

\func subsets-largest (S : SetSpec) : \Sigma (f : S -> S.A -> \Prop) (isInj f) => (
  \lam s a => isElem a s,
  \lam x y p => \let q => unext p
                \in setExt (\lam a => rewrite (q a) (id, id))
)

-- 4. Определите функцию isEmpty для ArraySet и для произвольного конечного множества

\func isEmptyArraySet {A : \Set} (xs : ArraySet A) : Bool => {?}

\func isEmptySet {S : FinSetSpec} (s : S) : Bool => {?}

-- 5. Определите функцию union {A : \Set} : S -> S -> S для ArraySet и для произвольного S (удовлетворяющего FinSetSpec)

-- 6. Определите функцию intersection {A : DecSet} : S -> S -> S для ArraySet и для произвольного S (удовлетворяющего FinSetSpec)

-- 7. Мы не можем определить функцию size в общем случае, но мы можем определить предикат S -> Nat -> \Prop,
--    соответствующий \lam xs n => size xs <= n
--    a) Определите описанный предикат
--    b) Определите функцию size из лекции
--    c) Докажите, что size-le эквивалентно определению через size, если A -- разрешимо и S -- конечно

\func size-le {S : SetSpec} (s : S) (n : Nat) : \Prop => {?}

\func size {S : FinSetSpec} (d : DecSet S.A) (s : S) : Nat => {?}

-- Optional
-- 8. Определите предикат isFin : \Type -> \Prop так,
--    чтобы множество \Sigma (P : A -> \Prop) (isFin (\Sigma (a : A) (P a))) удовлетворяло FinSetSpec
--    Определите этот инстанс

-- Optional
-- 9. Определите NubArraySet (ArraySet без повторений) и инстанс FinSetSpec для него
