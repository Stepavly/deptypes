\import Data.Bool
\import Data.List
\import Data.Or
\import Function.Meta
\import Logic.Meta
\import Meta
\import Order.LinearOrder
\import Order.StrictOrder
\import Paths
\import Paths.Meta
\import hw07
\import lect07 (filter)
\import lect08
\open LinearOrder

-- 1. Реализуйте функцию filter и докажите ее корректность, то есть, что выполнены следующие условия:
--    * filter p xs является подсписком xs
--    * Все элементы filter p xs удовлетворяют предикату p
--    * Любой подсписок xs с тем же свойством является подсписком filter p xs

\data AllInList {A : \Type} (p : A -> Bool) (xs : List A) \elim xs
  | nil => all-in-list-nil
  | :: x xs => all-in-list-cons (p x = true) (AllInList p xs)

\func filter-satisfies-p {A : \Type} (p : A -> Bool) (xs : List A) : AllInList p (filter p xs) \elim xs
  | nil => all-in-list-nil
  | a :: xs => cases (p a arg addPath) \with {
    | false, p1 => filter-satisfies-p p xs
    | true, p1 => all-in-list-cons p1 (filter-satisfies-p p xs)
  }

\func filter-includes-satisfying-sublists {A : \Type} (p : A -> Bool) (xs : List A) (l : List A) (sub : l `Sublist` xs) (sat : AllInList p xs) : l `Sublist` filter p xs \elim xs, l, sub, sat
  | nil, nil, sublist-nil, all-in-list-nil => sublist-nil
  | x :: xs, lh :: lt, sublist-consume lh=x sub, all-in-list-cons px=true sat => cases (p x arg addPath) \with {
    | true, px=true' => sublist-consume lh=x (filter-includes-satisfying-sublists p xs lt sub sat)
    | false, px=false => contradiction
  }
  | x :: xs, l, sublist-skip sub, all-in-list-cons p1 sat => cases (p x arg addPath) \with {
    | true, px=true => sublist-skip (filter-includes-satisfying-sublists p xs l sub sat)
    | false, px=false => contradiction
  }

-- 2. Докажите, что Perm l1 l2 тогда и только тогда, когда Insertion.sort l1 = Insertion.sort l2

\lemma insert-comm {A : Dec} (a a' : A) (l : List A)
  : Insertion.sort.insert a (Insertion.sort.insert a' l) = Insertion.sort.insert a' (Insertion.sort.insert a l)
  => \case trichotomy a a' \with {
    | less a<a' => aux a<a' l
    | equals p => rewrite p idp
    | greater a>a' => inv (aux a>a' l)
  }
  \where {
    \lemma aux {A : Dec} {a a' : A} (a<a' : a < a') (l : List A)
      : Insertion.sort.insert a (Insertion.sort.insert a' l) = Insertion.sort.insert a' (Insertion.sort.insert a l) \elim l
      | nil => mcases (idp <|> contradiction)
      | a1 :: l => repeat {4} mcases (idp <|> contradiction <|> pmap (a1 ::) (aux a<a' l))
  }

\func perm<=>same-sorted {A : Dec} (l1 l2 : List A) : Perm l1 l2 <-> (Insertion.sort l1 = Insertion.sort l2) =>
  (perm=>same-sorted l1 l2, same-sorted=>perm l1 l2)
  \where {
    \func perm=>same-sorted (l1 l2 : List A) (p : Perm l1 l2) : Insertion.sort l1 = Insertion.sort l2 \elim l1, l2, p
      | nil, nil, perm-nil => idp
      | x :: xs, y :: yx, perm-cons x=y perm-tails => pmap2 Insertion.sort.insert x=y (perm=>same-sorted _ _ perm-tails)
      | l1, l2, perm-trans {zs} l1->zs zs->l2 => perm=>same-sorted l1 zs l1->zs *> perm=>same-sorted zs l2 zs->l2
      | x :: (x' :: l3), y :: (y' :: l4), perm-swap p p1 p2 => rewrite (p, p1, p2) (insert-comm y' y (Insertion.sort l4))

    \func same-sorted=>perm (l1 l2 : List A) (p : Insertion.sort l1 = Insertion.sort l2) : Perm l1 l2 =>
      perm-trans (Insertion.sort-perm l1) (rewrite p (inv-perm (Insertion.sort-perm l2)))

    \func inv-perm {A : \Type} {l1 l2 : List A} (p : Perm l1 l2) : Perm l2 l1 \elim l1, l2, p
      | nil, nil, perm-nil => perm-nil
      | x :: l3, y :: l4, perm-cons p p1 => perm-cons (inv p) (inv-perm p1)
      | l3, l4, perm-trans {zs} p1 p2 => perm-trans (inv-perm p2) (inv-perm p1)
      | x :: (x' :: l3), y :: (y' :: l4), perm-swap p p1 p2 => rewrite (p, p1, p2) (perm-swap idp idp idp)
  }

-- 3. Докажите, что спецификация "результат является перестановкой входа и отсортирован" является полной для функции sort

\func completeness {A : Dec} (sort : List A -> List A) (l : List A) (p : Perm l (sort l)) (s : Sorted (sort l))
  : sort l = Insertion.sort l \elim l
  | nil => perm-of-nil-is-nil nil idp p
  | a :: l => \let | ss => inv (perm<=>same-sorted.perm=>same-sorted _ _ p)
              \in sort-of-sorted-is-id _ s *> ss
  \where {
    \func perm-of-nil-is-nil {list : List A}  (isNil : List A) (indeedIsNill : isNil = nil) (perm : Perm isNil list) : list = nil
      | nil, nil, indeedIsNill, perm-nil => idp
      | nil, x :: isNil, (), perm
      | y :: list, x :: isNil, (), perm
      | list, isNil, idp, perm-trans {zs} perm1 perm2 => \let
        | zs=nil => perm-of-nil-is-nil isNil idp perm1
        | list=zs => perm-of-nil-is-nil zs zs=nil perm2
                                                         \in list=zs

    \func sort-of-sorted-is-id (list : List A) (s : Sorted list) : list = Insertion.sort list \elim list, s
      | nil, sorted-nil => idp
      | x :: list, sorted-cons x<=head s => rewriteI (sort-of-sorted-is-id list s) (insert-evaluates-trivially x list s x<=head)
      \where {
        \func insert-evaluates-trivially {A : Dec} (x : A) (list : List A) (s : Sorted list) (x<=head : x <= headDef x list) : x :: list = Insertion.sort.insert x list =>
          cases (list arg addPath) \with {
            | nil, _ => idp
            | y :: list', pppp => insert-evaluates-trivially-lemma x y list' (rewriteF pppp x<=head)
          }
          \where {
            \func insert-evaluates-trivially-lemma {A : Dec} (x : A) (y : A) (list' : List A) (x<=y : x <= y) : x :: y :: list' = (\case dec<_<= y x \with {
              | inl _ => y :: Insertion.sort.insert x list'
              | inr _ => x :: y :: list'
            }) => rewrite (dec<=_reduce x<=y) idp
          }
      }
  }

-- 4. Определите факториал через хвостовую рекурсию
--    Докажите, что он равен обычному определению факториала

-- 5. Определите функцию, которая проверяет правильность скобочной последовательности
--    Докажите ее корректность

\data Paren | Left | Right

\func isBalanced (xs : List Paren) : Bool => isBalanced-with-balance xs 0
  \where {
    \func isBalanced-with-balance (xs : List Paren) (balance : Nat) : Bool \elim xs, balance
      | nil, 0 => true
      | nil, suc _ => false
      | Left :: xs1, descent => isBalanced-with-balance xs1 (suc descent)
      | Right :: _, 0 => false
      | Right :: xs1, suc descent => isBalanced-with-balance xs1 descent
  }

\data Balanced (xs : List Paren) \with
  | nil => nil-balanced
  | :: Left xs => cons-balanced {ys : List Paren} (Balanced ys) (xs = ys ++ Right :: nil)
  | xs => append-balanced {ys zs : List Paren} (Balanced ys) (Balanced zs) (xs = ys ++ zs)

\func isBalanced-correct (xs : List Paren) : (isBalanced xs = true) <-> Balanced xs
  => {?}
