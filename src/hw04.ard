\import Data.Bool
\import Data.List (List, length, nil, ::)
\import Function
\import Function.Meta
\import lect02 (T, absurd)
\import lect04 (Nat-elim, Nat-rec, Vec, cons, vec)

\open Nat (+, *)

-- 1. Напишите функцию lookup, которая принимает List A и натуральное число и возвращает элемент по заданому индексу
--    В общем случае эту функцию определить невозможно, т.к. индекс может быть больше, чем число элементов в списке
--    Поэтому эта функция должна дополнительно еще принимать доказательство того,
--    что индекс находится в допустимых границах, в виде T (n < length xs)

\func \infix 4 < (x y : Nat) : Bool
  | 0, 0 => false
  | 0, suc y => true
  | suc x, 0 => false
  | suc x, suc y => x < y


\func lookup {A : \Type} (l : List A) (n : Nat) (p : T (n < length l)) : A
  | x :: xs, 0, () => x
  | x :: xs, suc n, p => lookup xs n (removeSuc p)
  | nil, suc n, p => absurd p
  \where {
    \func removeSuc {x y : Nat} (p : T (suc x < suc y)) : T (x < y) \elim x, y
      | 0, 0 => absurd p
      | 0, suc y => p
      | suc x, 0 => absurd p
      | suc x, suc y => removeSuc p
  }

-- 2. Реализуйте аналоги функции replicate для vec и Vec
--    (эта функция создает список заданной длины, состоящий из повторений данного элемента)
\func replicate {A : \Type} (n : Nat) (a : A) : vec A n
  | 0, a => ()
  | suc n, a => (a, replicate n a)

\func replicate' {A : \Type} (n : Nat) (a : A) : Vec A n
  | 0, a => Vec.nil
  | suc n, a => cons a (replicate' n a)

-- 3. Реализуйте аналоги функции map для vec и Vec
\func map {A B : \Type} {n : Nat} (f : A -> B) (v : vec A n) : vec B n \elim n, v
  | 0, v => ()
  | suc n, (head, tail) => (f head, map f tail)

\func map' {A B : \Type} {n : Nat} (f : A -> B) (v : Vec A n) : Vec B n \elim n, v
  | 0, v => Vec.nil
  | suc n, cons head tail => cons (f head) (map' f tail)

-- 4. Реализуйте аналоги функции zipWith для vec и Vec
--    Функция должна принимать вектора одинаковой длины

\func zipWith {A B C : \Type} {n : Nat} (f : A -> B -> C) (v1 : vec A n) (v2 : vec B n) : vec C n \elim n, v1, v2
  | 0, v1, v2 => ()
  | suc n, (head1, tail1), (head2, tail2) => (f head1 head2, zipWith f tail1 tail2)

\func zipWith' {A B C : \Type} {n : Nat} (f : A -> B -> C) (v1 : Vec A n) (v2 : Vec B n) : Vec C n \elim n, v1, v2
  | 0, v1, v2 => Vec.nil
  | suc n, cons head1 tail1, cons head2 tail2 => cons (f head1 head2) $ zipWith' f tail1 tail2

-- 5. Определите тип CTree A n полных бинарных деревьев высоты ровно n,
--    которые хранят элементы только во внутренних узлах, но не в листьях
--    Высота листа равна 0

\data CTree (A : \Type) (n : Nat) \elim n
  | 0 => cleaf
  | suc n => cnode (CTree A n) A (CTree A n)

-- 6. Определите тип Tree A n бинарных деревьев высоты не больше n,
--    которые хранят элементы только во внутренних узлах, но не в листьях
--    Высота листа равна 0

\data Tree (A : \Type) (n : Nat) \elim n
  | _ => leaf
  | suc n => node (Tree A n) A (Tree A n)

-- Определите функцию, возвращающую высоту дерева

\func height {A : \Type} (n : Nat) (t : Tree A n) : Fin (suc n) \elim n, t
  | n, leaf => 0
  | suc n, node t1 a t2 => suc (max (height n t1) (height n t2))
  \where {
    \func max (a b : Nat) : Nat
      | 0, 0 => 0
      | 0, b => b
      | a, 0 => a
      | suc a, suc b => suc (max a b)
  }

-- Optional task
-- 7. Функции Fin n -> A соответствуют спискам элементов A длины n
--    Функция, преобразующая Vec A n в Fin n -> A, была реализована на лекции
--    Реализуйте обратную функцию

\func coin {A : \Type} {n : Nat} (f : Fin n -> A) : Vec A n \elim n
  | 0 => Vec.nil
  | suc n => cons (f 0) $ coin (\lam i => f (suc i))

\func coinTest : coin (\lam (i : Fin 3) => (i * i : Nat)) = (cons 0 $ cons 1 $ cons 4 $ Vec.nil) => idp

-- Optional task
-- 8. Определите тип матриц и ряд функций над ними

\func Mat (A : \Type) (n m : Nat) : \Type => Vec (Vec A m) n

\func put {A : \Type} {n : Nat} (v : Vec A n) (i : Fin n) (a : A) : Vec A n \elim n, v, i
  | suc n, cons head tail, 0 => cons a tail
  | suc n, cons head tail, suc i => cons head (put tail i a)

\func \infixl 5 !! {A : \Type} {n : Nat} (v : Vec A n) (i : Fin n) : A \elim n, v, i
  | suc n, cons head tail, 0 => head
  | suc n, cons head tail, suc i => tail !! i

-- Диагональная матрица с элементами e на диагонали и z на остальных позициях

\func diag {A : \Type} (z e : A) (n : Nat) : Mat A n n => coin (\lam i => put (replicate' n z) i e)

\func row1 : Vec Nat 2 => cons 1 (cons 0 Vec.nil)
\func row2 : Vec Nat 2 => cons 0 (cons 1 Vec.nil)
\func diagTest : diag 0 1 2 = cons row1 (cons row2 Vec.nil) => idp

-- Транспонирование матриц

\func transpose {A : \Type} {n m : Nat} (M : Mat A n m) : Mat A m n => coin (\lam i => coin (\lam j => M !! j !! i))

-- Сложение матриц

\func matAdd {A : \Type} (add : A -> A -> A) (n m : Nat) (M N : Mat A n m) : Mat A n m =>
  coin (\lam i => zipWith' add (M !! i) (N !! i))

-- Умножение матриц
-- z ─ нейтральный элемент по сложению
\func matMul {A : \Type} (z : A) (add mul : A -> A -> A) (n m k : Nat) (M : Mat A n m) (N : Mat A m k) : Mat A n k =>
  coin (\lam i => coin (\lam j => scalarProd z add mul (M !! i) (transpose N !! j)))
  \where {
    \func scalarProd {A : \Type} (z : A) (add mul : A -> A -> A) {n : Nat} (v1 v2 : Vec A n) : A \elim n, v1, v2
      | 0, v1, v2 => z
      | suc n, cons head1 tail1, cons head2 tail2 => add (mul head1 head2) (scalarProd z add mul tail1 tail2)
  }

\func matMulTest : matMul 0 (+) (*) 3 3 3 (diag 2 3 3) (diag 0 1 3) = diag 2 3 3 => idp

-- 9. Определите факториал через Nat-rec
\func fact (n : Nat) : Nat => Nat-rec Nat 1 (\lam n r => suc n * r) n

\func factTest : fact 6 = 720 => idp

-- 10. Докажите ассоциативность сложения для натуральных чисел через Nat-elim
\func +-assoc (n m k : Nat) : n + (m + k) = (n + m) + k =>
  Nat-elim (\lam n => n + (m + k) = (n + m) + k) idp (\lam _ ih => pmap suc ih) n

-- 11. Определите рекурсор и элиминатор для D

\data D
  | con1 Nat
  | con2 D D
  | con3 (Nat -> D)

\func D-elim {C : D -> \Type}
             (con1 : \Pi (n : Nat) -> C (con1 n))
             (con2 : \Pi (d1 d2 : D) -> C d1 -> C d2 -> C (con2 d1 d2))
             (con3 : \Pi (f : Nat -> D) -> (\Pi (n : Nat) -> C (f n)) -> C (con3 f))
             (d : D) : C d \elim d
  | con1 n => con1 n
  | con2 d1 d2 => con2 d1 d2 (D-elim con1 con2 con3 d1) (D-elim con1 con2 con3 d2)
  | con3 f => con3 f (\lam n => D-elim con1 con2 con3 (f n))

\func D-rec {C : \Type}
            (con1 : Nat -> C)
            (con2 : D -> D -> C -> C -> C)
            (con3 : (Nat -> D) -> (Nat -> C) -> C)
            (d : D)
  : C => D-elim con1 con2 con3 d

{- Для проверки, что определения D-elim и D-rec верные, вы можете попробовать определить foo через D-rec
\func foo (d : D) : Nat
  | con1 n => n
  | con2 d1 d2 => foo d1 Nat.+ foo d2
  | con3 g => foo (g (foo (g 100)))
-}
\func foo-rec (d : D) : Nat => D-rec id (\lam d1 d2 c1 c2 => c1 + c2) (\lam f g => g (g 100)) d

-- 12. Определите рекурсор и элиминатор для List

\func List-rec {A : \Type} {C : \Type} (z : C) (cons : A -> List A -> C -> C) (l : List A) : C \elim l
  | nil => z
  | head :: tail => cons head tail (List-rec z cons tail)

\func List-elim {A : \Type} {C : List A -> \Type} (z : C nil)
                (cons : \Pi (head : A) (tail : List A) -> C tail -> C (head :: tail)) (l : List A) : C l \elim l
  | nil => z
  | head :: tail => cons head tail (List-elim z cons tail)

-- 13. Докажите pmap при помощи паттерн матчинга с idp

\func pmap {A B : \Type} (f : A -> B) {a a' : A} (p : a = a') : f a = f a' \elim p
  | idp => idp

-- 14. Докажите pmap2 при помощи паттерн матчинга с idp

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' \elim p, q
  | idp, idp => idp

-- Optional task
-- 15. У оператора J есть другая форма, которую мы будем называть Jalt
--     Докажите, что J и Jalt эквивалентны, то есть выразите одно через другое и наоборот

-- Выразите Jalt через J. Можно пользоваться только J, idp и всем, что через них выражается

\func Jalt {A : \Type} (B : \Pi (a a' : A) -> a = a' -> \Type)
           (b : \Pi (a : A) -> B a a idp)
           {a a' : A} (p : a = a') : B a a' p => {?}

-- Выразите J через Jalt. Можно пользоваться только Jalt, idp и всем, что через них выражается
-- Hint:
-- a. Выразите transport через Jalt
-- b. Докажите, что тип \Sigma (x : A) (a = x) одноэлементный,
--    то есть, что для любого p : \Sigma (x : A) (a = x) верно, что (x, idp) = p
-- c. Используя эти две конструкции, легко определить J

\func transport'' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' => {?}

\func sigma-contr {A : \Type} {a : A} (p : \Sigma (x : A) (a = x)) : (a, idp) = {\Sigma (x : A) (a = x)} p => {?}

\func J' {A : \Type} {a : A} (B : \Pi (a' : A) -> a = a' -> \Type)
         (b : B a idp)
         {a' : A} (p : a = a') : B a' p => {?}
